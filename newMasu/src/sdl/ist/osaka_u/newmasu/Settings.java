package sdl.ist.osaka_u.newmasu;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Collections;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Set;import sdl.ist.osaka_u.newmasu.util.VERSION;public class Settings {	private static Settings INSTANCE = null;	public static Settings getInstance() {		if (null == INSTANCE) {			INSTANCE = new Settings();		}		return INSTANCE;	}	private Settings() {		this.targetDirectories = new HashSet<String>();		this.listFiles = new HashSet<String>();//		this.language = null;		this.fileMetricsFile = null;		this.classMetricsFile = null;		this.methodMetricsFile = null;		this.fieldMetricsFile = null;		this.statement = true;		this.libraries = new LinkedList<String>();	}	/**	 *	 * @return ������������������������������	 *	 *         ������������������������������������������	 *	 */	public Set<String> getTargetDirectories() {		return Collections.unmodifiableSet(this.targetDirectories);	}	public void addTargetDirectory(final String targetDirectory) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == targetDirectory) {			throw new IllegalArgumentException();		}		this.targetDirectories.add(targetDirectory);	}	public void setTargetDirectory(final String targetDirectory) {		if (null == targetDirectory) {			throw new IllegalArgumentException();		}		this.targetDirectories.clear();		this.addTargetDirectory(targetDirectory);	}	public VERSION getVersion(){		return this.version;	}	public void setVersion(final String version) {		if (null == version || version.equalsIgnoreCase("1.7")) {			this.version = VERSION.JAVA17;		} else if (version.equalsIgnoreCase("1.6")) {			this.version = VERSION.JAVA16;		} else if (version.equalsIgnoreCase("1.5")) {			this.version = VERSION.JAVA15;		} else if (version.equalsIgnoreCase("1.4")) {			this.version = VERSION.JAVA14;		} else if (version.equalsIgnoreCase("1.3")) {			this.version = VERSION.JAVA13;		} else {			throw new IllegalArgumentException();		}	}	/**	 *	 * @return ������������������������������������������������������������������	 *	 *         ������������������������������������������������������������������������������������	 *	 */	public Set<String> getListFiles() {		return Collections.unmodifiableSet(this.listFiles);	}	public void addListFile(final String listFile) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == listFile) {			throw new IllegalArgumentException();		}        Path p = Paths.get(listFile);        if(!Files.exists(p))            System.err.println(p + " does not exists");        else            this.listFiles.add(listFile);	}	/**	 *	 * @return ������������������������������������������������������������������	 *	 *         ������������������������������������������������������������������������������������	 *	 */	public String getFileMetricsFile() {		return this.fileMetricsFile;	}	public void setFileMetricsFile(final String fileMetricsFile) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == fileMetricsFile) {			throw new IllegalArgumentException();		}		this.fileMetricsFile = fileMetricsFile;	}	/**	 *	 * @return ���������������������������������������������������������������	 *	 *         ���������������������������������������������������������������������������������	 *	 */	public String getClassMetricsFile() {		return this.classMetricsFile;	}	public void setClassMetricsFile(final String classMetricsFile) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == classMetricsFile) {			throw new IllegalArgumentException();		}		this.classMetricsFile = classMetricsFile;	}	/**	 *	 * @return ������������������������������������������������������������������	 *	 *         ������������������������������������������������������������������������������������	 *	 */	public String getMethodMetricsFile() {		return methodMetricsFile;	}	public void setMethodMetricsFile(final String methodMetricsFile) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == methodMetricsFile) {			throw new IllegalArgumentException();		}		this.methodMetricsFile = methodMetricsFile;	}	/**	 *	 * @return ���������������������������������������������������������������������	 */	public String getFieldMetricsFile() {		return this.fieldMetricsFile;	}	public void setFieldMetricsFile(final String fieldMetricsFile) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == fieldMetricsFile) {			throw new IllegalArgumentException();		}		this.fieldMetricsFile = fieldMetricsFile;	}	/**	 * ���������������������������������������������	 *	 * @return������������������������true,������������������false	 */	public boolean isStatement() {		return this.statement;	}	/**	 * ������������������������������������������������������	 *	 * @param statement	 *            ���������������������true, ������������������false	 */	public void setStatement(final boolean statement) {		this.statement = statement;	}	/**	 * ������������������������������������������ ���������������������������������������������������������������������������������������������������������������jar���������������	 * class������������������������������������������������	 *	 * @param library	 */	public void addLibrary(final String library) {//		MetricsToolSecurityManager.getInstance().checkAccess();		if (null == library) {			throw new IllegalArgumentException();		}		this.libraries.add(library);	}	/**	 * ������������������List���������	 *	 * @return ������������������List	 */	public List<String> getLibraries() {		return Collections.unmodifiableList(this.libraries);	}	/**	 * ������������������������������������������������������������	 */	private final Set<String> targetDirectories;	/**	 * ���������������������������������������������������������������������������������������������������	 */	private final Set<String> listFiles;	/**	 * ���������������������������������������������������������������������	 *///	private LANGUAGE language;	/**	 * ������������Java������������������������������������������������������������	 */	private VERSION version;	/**	 * ���������������������������������������������������������������������������������������������������������	 */	private String fileMetricsFile;	/**	 * ������������������������������������������������������������������������������������������������������	 */	private String classMetricsFile;	/**	 * ���������������������������������������������������������������������������������������������������������	 */	private String methodMetricsFile;	/**	 * ������������������������������������������������������������������������������������������������������������	 */	private String fieldMetricsFile;	/**	 * ������������������������������������������������������������������	 */	private boolean statement;	/**	 * ������������������������������������������������������	 */	private List<String> libraries;}