package sdl.ist.osaka_u.newmasu.AST;import java.util.ArrayList;import java.util.List;import org.eclipse.jdt.core.dom.*;import sdl.ist.osaka_u.newmasu.data.AnonymousTypeDeclarationInfo;import sdl.ist.osaka_u.newmasu.data.SimpleNameInfo;import sdl.ist.osaka_u.newmasu.data.BindingManager;import sdl.ist.osaka_u.newmasu.util.NodeFinder;public class ASTVisitorForInfo extends ASTVisitor {    @Override    public boolean visit(PackageDeclaration node) {        return false;    }    @Override    public boolean visit(ImportDeclaration node) {        return false;    }    // ////////////////////////////////////////////////////////    // クラス情報に関する部分    // ////////////////////////////////////////////////////////    @Override    public boolean visit(TypeDeclaration node) {/*        for (TypeDeclaration t : node.getTypes())            System.out.println(t);        System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");*/        ITypeBinding typeBinding = node.resolveBinding();        if (typeBinding != null) {            if (!typeBinding.isTopLevel()) {                registerInnerClass(node, typeBinding);            }            if (node.getJavadoc() != null)                node.getJavadoc().accept(this);            if (node.modifiers() != null)                for (Object o : node.modifiers()) {                    ASTNode ast = (ASTNode) o;                    ast.accept(this);                }            if (node.getName() != null)                node.getName().accept(this);            if (node.typeParameters() != null)                for (Object o : node.typeParameters()) {                    ASTNode ast = (ASTNode) o;                    ast.accept(this);                }            if (node.getSuperclassType() != null) {                ITypeBinding binding = node.getSuperclassType().resolveBinding();                if(binding!=null)                    BindingManager.putExtendClass(binding,                        NodeFinder.getClassInfo(node));            }            if (node.superInterfaceTypes() != null)                for (Object o : node.superInterfaceTypes()) {                    Type ast = (Type) o;                    ITypeBinding binding = ast.resolveBinding();                    if(binding!=null)                        BindingManager.putExtendClass(binding,                            NodeFinder.getClassInfo(node));                }            if (node.bodyDeclarations() != null)                for (Object o : node.bodyDeclarations()) {                    ASTNode ast = (ASTNode) o;                    ast.accept(this);                }        }        return false;    }    public boolean visit(AnonymousClassDeclaration node) {        IBinding binding = node.resolveBinding();        if(binding!=null)            BindingManager.putDeclarationUnit(binding,                new AnonymousTypeDeclarationInfo(node));        return super.visit(node);    }    // ////////////////////////////////////////////////////////    // メソッド情報に関する部分    // ////////////////////////////////////////////////////////    @Override    public boolean visit(MethodInvocation node) {        List<IMethodBinding> callers = null;        ASTNode parent = NodeFinder.getMethodNode(node);        if (parent != null) {            Object o = parent.getProperty("Caller");            if (o == null) {                callers = new ArrayList<IMethodBinding>();            } else {                callers = (List<IMethodBinding>) o;            }            IMethodBinding binding = node.resolveMethodBinding();            callers.add(binding);            parent.setProperty("Caller", callers);        }        return super.visit(node);    }    @Override    public boolean visit(ClassInstanceCreation node) {        List<IMethodBinding> callers = null;        ASTNode parent = NodeFinder.getMethodNode(node);        Object obj = parent.getProperty("Caller");        if (obj == null) {            callers = new ArrayList<IMethodBinding>();        } else {            callers = (List<IMethodBinding>) obj;        }        IMethodBinding binding = node.resolveConstructorBinding();        if (binding != null) {            callers.add(binding);            parent.setProperty("Caller", callers);            BindingManager                    .putReferenceUnit(binding, NodeFinder.getMethodInfo(node));        }        if (node.getExpression() != null)            node.getExpression().accept(this);        if (node.typeArguments() != null)            for (Object o : node.typeArguments()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.arguments() != null)            for (Object o : node.arguments()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.getAnonymousClassDeclaration() != null)            node.getAnonymousClassDeclaration().accept(this);        return false;    }    @Override    public boolean visit(MethodDeclaration node) {        if (!node.isConstructor()) {            return true;        }        IBinding binding = node.resolveBinding();        if(binding!=null)            BindingManager.putDeclarationUnit(binding,                NodeFinder.getMethodInfo(node));        if (node.getJavadoc() != null)            node.getJavadoc().accept(this);        if (node.modifiers() != null)            for (Object o : node.modifiers()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.typeParameters() != null)            for (Object o : node.typeParameters()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.parameters() != null)            for (Object o : node.parameters()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.thrownExceptions() != null)            for (Object o : node.thrownExceptions()) {                ASTNode ast = (ASTNode) o;                ast.accept(this);            }        if (node.getBody() != null)            node.getBody().accept(this);        return false;    }    // ////////////////////////////////////////////////////////    // 変数情報に関する部分    // ////////////////////////////////////////////////////////    @Override    public boolean visit(SimpleName node) {        IBinding binding = node.resolveBinding();        if (binding != null) {            if (node.isDeclaration()) {                if (binding.getKind() == IBinding.VARIABLE) {                    BindingManager.putDeclarationUnit(binding,                            new SimpleNameInfo(node));                    registerVariables(node, (IVariableBinding) binding);                } else {                    BindingManager.putDeclarationUnit(binding,                            NodeFinder.getDeclaredNodeInfo(node));                }            } else {                if (binding.getKind() == IBinding.VARIABLE) {                    BindingManager.putReferenceUnit(binding,                            new SimpleNameInfo(node));                    registerVariables(node, (IVariableBinding) binding);                } else {                    BindingManager.putReferenceUnit(binding,                            NodeFinder.getDeclaredNodeInfo(node));                }            }        } else {            System.err.println("binding error in visit(SimpleName) @ "                    + node.getIdentifier());        }        return super.visit(node);    }    @Override    public boolean visit(Assignment node) {        Expression exp = node.getLeftHandSide();        if (exp != null) {            if (exp.getNodeType() == ASTNode.SIMPLE_NAME) {                exp.setProperty("Assignment", true);            } else {                node.getLeftHandSide().accept(new AssignmentVisitor());            }        }        return true;    }    @Override    public boolean visit(SingleVariableDeclaration node) {        SimpleName name = node.getName();        Expression init = node.getInitializer();        if (init != null) {            name.setProperty("Assignment", true);        }        return true;    }    @Override    public boolean visit(VariableDeclarationFragment node) {        SimpleName name = node.getName();        Expression init = node.getInitializer();        if (init != null) {            name.setProperty("Assignment", true);        }        return true;    }    @Override    public boolean visit(LabeledStatement node) {        if (node.getBody() != null)            node.getBody().accept(this);        return false;    }    @Override    public boolean visit(BreakStatement node) {        return false;    }    // ////////////////////////////////////////////////////////    private void registerInnerClass(AbstractTypeDeclaration node, ITypeBinding binding) {        List<ITypeBinding> callers = null;        ASTNode parent = NodeFinder.getTypeNode(node.getParent());        Object o = parent.getProperty("Inner");        if (o == null) {            callers = new ArrayList<ITypeBinding>();        } else {            callers = (List<ITypeBinding>) o;        }        callers.add(binding);        parent.setProperty("Inner", callers);        AbstractTypeDeclaration outerClass = (AbstractTypeDeclaration) parent;        if (!outerClass.resolveBinding().isTopLevel()) {            registerInnerClass(outerClass, binding);        }    }    private void registerVariables(SimpleName node, IVariableBinding binding) {        List<IVariableBinding> refs = null;        ASTNode parent = NodeFinder.getDeclaredModule(node.getParent());        Object o = parent.getProperty("Variable");        if (o == null) {            refs = new ArrayList<IVariableBinding>();        } else {            refs = (List<IVariableBinding>) o;        }        refs.add(binding);        parent.setProperty("Variable", refs);    }    // ////////////////////////////////////////////////////////    /**     * 代入してる変数を見つけるためのクラス     *     * @author t-ishihr     */    private class AssignmentVisitor extends ASTVisitor {        @Override        public boolean visit(FieldAccess node) {            SimpleName name = node.getName();            if (name != null) {                name.setProperty("Assignment", true);            }            return false;        }        @Override        public boolean visit(ParenthesizedExpression node) {            Expression expression = node.getExpression();            if (expression.getNodeType() == ASTNode.SIMPLE_NAME) {                expression.setProperty("Assignment", true);            }            return true;        }        @Override        public boolean visit(SuperFieldAccess node) {            SimpleName name = node.getName();            if (name != null) {                name.setProperty("Assignment", true);            }            return false;        }    }}