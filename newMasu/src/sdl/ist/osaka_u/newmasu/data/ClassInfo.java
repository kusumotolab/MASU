package sdl.ist.osaka_u.newmasu.data;import java.util.Set;import org.eclipse.jdt.core.dom.ITypeBinding;public interface ClassInfo extends UnitInfo {	/**	 * 定義されているフィールドを取得する．	 *	 * @return 定義されているフィールドのset	 */	public Set<VariableInfo> getFields();	/**	 * 定義されているメソッドを取得する．	 *	 * @return 定義されているメソッドのset	 */	public Set<MethodInfo> getMethods();	/**	 * インナークラスを取得する．インナークラスのインナークラスも取得する．	 *	 * @return インナークラスのset	 */	public Set<ClassInfo> getInnerClass();	/**	 * このクラスが継承している全てのクラスを取得する．	 *	 * @return このクラスが継承している全てのクラスのset	 */	public Set<ClassInfo> getSuperClass();	/**	 * このクラスを継承している全てのクラスを取得する．	 *	 * @return このクラスを継承している全てのクラスのset	 */	public Set<ClassInfo> getSubClass();	/**	 * このクラスを使用している全てのクラスを取得する．	 *	 * @return このクラスを使用している全てのクラスのset	 */	public Set<ClassInfo> getUsedClass();	/**	 * このクラスが使用している全てのクラスを取得する．	 *	 * @return このクラスが使用している全てのクラスのset	 */	public Set<ClassInfo> getUsingClass();	/**	 * このクラスのbindingを取得する．	 *	 * @return このクラスのbinding	 */	public ITypeBinding resolveBinding();	/**	 * このinfoがクラスを表しているかを確認する	 *	 * @return	 * クラスであればtrue，そうでなければfalse	 */	public boolean isClass();	/**	 * このinfoがインターフェースを表しているかを確認する	 *	 * @return	 * インターフェースであればtrue，そうでなければfalse	 */	public boolean isInterface();	/**	 * このinfoが列挙型を表しているかを確認する	 *	 * @return	 * 列挙型であればtrue，そうでなければfalse	 */	public boolean isEnum();	/**	 * このinfoが匿名クラスを表しているかを確認する	 *	 * @return	 * 匿名クラスであればtrue，そうでなければfalse	 */	public boolean isAnonymousClass();}