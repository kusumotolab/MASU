package sdl.ist.osaka_u.newmasu.test;import java.util.List;import org.eclipse.jdt.core.dom.*;import sdl.ist.osaka_u.newmasu.Finder.DelegateSample;import sdl.ist.osaka_u.newmasu.Finder.NodeFinder2;import sdl.ist.osaka_u.newmasu.Finder.NodeOrBinding;import sdl.ist.osaka_u.newmasu.Finder.SimpleFinder;public class TestVisitor extends ASTVisitor {    private void tst2(Block node){        List<Block> res = SimpleFinder.getUpper(node,ASTNode.BLOCK);        for(Block b:res){            System.out.println(b.getLength());        }        System.out.println("---------------------------------------------");    }    private void tst1(MethodDeclaration node){        List<ITypeBinding> res =                NodeFinder2.get( new NodeOrBinding(node), ASTNode.TYPE_DECLARATION,                        DelegateSample.getInherited(), DelegateSample.bindingNullJudge());        // print method        String paramStr = "";        List<SingleVariableDeclaration> param = node.parameters();        for( SingleVariableDeclaration p : param ){            paramStr += p.getType().toString() + " " + p.getName() + ", ";        }        System.out.println( node.getReturnType2().toString() + " " + node.getName() + "( " + paramStr + ")" );        // print classes        for( ITypeBinding b : res){            if( b.isInterface() )                System.out.print("interface ");            else if(b.isEnum())                System.out.print("enum ");            else                System.out.print("class ");            System.out.println(b.getName());        }        System.out.println("---------------------------------------------");    }    public boolean visit(Block node){        tst2(node);        /*//        ITypeBinding bind = node.resolveBinding();        List<ITypeBinding> res =                NodeFinder2.get( new NodeOrBinding(node), ASTNode.TYPE_DECLARATION,                        NodeFinder2.getInherited(), NodeFinder2.bindingNullJudge());//        System.out.println(node.toString());        System.out.println("this is first " );        for( ITypeBinding b : res){            System.out.println(b.getName());        }        System.out.println("---------------------------------------------");*//*        List<ITypeBinding> mm =                NodeFinder2.get( new NodeOrBinding(node), ASTNode.TYPE_DECLARATION,                        DelegateSample.getInherited(), DelegateSample.bindingNullJudge()                );        System.out.println("this is first " );        for( ITypeBinding b : mm){            for( ITypeBinding b2 : mm){                System.out.println(b.getName() + " vs " + b2.getName() );                IMethodBinding[] methods1 = b.getDeclaredMethods();                IMethodBinding[] methods2 = b2.getDeclaredMethods();                for( IMethodBinding m1 : methods1 ){                    for( IMethodBinding m2 : methods2){                        System.out.println( m1.getName() + " isOverride " + m2.getName() + " " + m1.overrides(m2));                    }                }            }        }        System.out.println("---------------------------------------------");*/        return true;    }}