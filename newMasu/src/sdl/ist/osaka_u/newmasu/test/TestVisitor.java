package sdl.ist.osaka_u.newmasu.test;import java.util.List;import com.sun.tools.javac.util.Pair;import org.eclipse.jdt.core.dom.*;import sdl.ist.osaka_u.newmasu.NodeFinder.Delegate;import sdl.ist.osaka_u.newmasu.NodeFinder.DelegateSample;import sdl.ist.osaka_u.newmasu.NodeFinder.NodeFinder2;import sdl.ist.osaka_u.newmasu.NodeFinder.NodeOrBinding;public class TestVisitor extends ASTVisitor {    public boolean visit(MethodDeclaration node){        /*//        ITypeBinding bind = node.resolveBinding();        List<ITypeBinding> res =                NodeFinder2.get( new NodeOrBinding(node), ASTNode.TYPE_DECLARATION,                        NodeFinder2.getInherited(), NodeFinder2.bindingNullJudge());//        System.out.println(node.toString());        System.out.println("this is first " );        for( ITypeBinding b : res){            System.out.println(b.getName());        }        System.out.println("---------------------------------------------");*/        List<ITypeBinding> mm =                NodeFinder2.get( new NodeOrBinding(node), ASTNode.TYPE_DECLARATION,                        NodeFinder2.getInherited(), NodeFinder2.bindingNullJudge()                );        System.out.println("this is first " );        for( ITypeBinding b : mm){            for( ITypeBinding b2 : mm){                System.out.println(b.getName() + " vs " + b2.getName() );                IMethodBinding[] methods1 = b.getDeclaredMethods();                IMethodBinding[] methods2 = b2.getDeclaredMethods();                for( IMethodBinding m1 : methods1 ){                    for( IMethodBinding m2 : methods2){                        System.out.println( m1.getName() + " isOverride " + m2.getName() + " " + m1.overrides(m2));                    }                }            }        }        System.out.println("---------------------------------------------");        return true;    }}