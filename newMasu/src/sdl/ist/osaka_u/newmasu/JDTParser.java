package sdl.ist.osaka_u.newmasu;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.List;import java.util.Set;import org.apache.commons.cli.BasicParser;import org.apache.commons.cli.CommandLine;import org.apache.commons.cli.CommandLineParser;import org.apache.commons.cli.HelpFormatter;import org.apache.commons.cli.OptionBuilder;import org.apache.commons.cli.Options;import org.apache.commons.cli.ParseException;import sdl.ist.osaka_u.newmasu.AST.ASTCaller;import sdl.ist.osaka_u.newmasu.Plugin.Plugin;import sdl.ist.osaka_u.newmasu.Plugin.pdg.GraphPlugin;import sdl.ist.osaka_u.newmasu.Plugin.pdg.Writer;import sdl.ist.osaka_u.newmasu.io.MetricsWriter;import sdl.ist.osaka_u.newmasu.util.ListFiles;public class JDTParser {	/**	 * @param args	 */	public static void main(String[] args) {		// コマンドライン引数を処理		final Options options = new Options();		{			options.addOption(OptionBuilder.withArgName("directory").hasArg()					.withDescription("target directory")					.create("d"));            options.addOption(OptionBuilder.withArgName("file").hasArg()                    .withDescription("target file")                    .create("f"));            options.addOption(OptionBuilder.withArgName("graphOutput").hasArg()                    .withDescription("graph output directory path")                    .create("o"));			options.addOption(OptionBuilder					.withArgName("language")					.hasArg()					.withDescription(                            "java version")					.create("v"));			options.addOption(OptionBuilder.withArgName("Library directories")					.hasArgs()					.withDescription("specify directories that store libraries")					.create("l"));			options.addOption(OptionBuilder					.withArgName("ClassMetricsFile")					.hasArg()					.withDescription(							"specify file that measured CLASS metrics were stored into")					.create("C"));			options.addOption(OptionBuilder					.withArgName("MethodMetricsFile")					.hasArg()					.withDescription(							"specify file that measured METHOD metrics were stored into")					.create("M"));			options.addOption(OptionBuilder					.withArgName("FieldMetricsFile")					.hasArg()					.withDescription(							"specify file that measured FIELD metrics were stored into")					.create("F"));            options.addOption(OptionBuilder                    .withArgName("PDG")                    .withDescription(                            "Run PDG Plugin")                    .create("p"));		}		CommandLine cmd = null;		try {			final CommandLineParser parser = new BasicParser();			cmd = parser.parse(options, args);		} catch (ParseException e) {			HelpFormatter f = new HelpFormatter();			f.printHelp("OptionsTip", options);			e.printStackTrace();			return;		}        if(cmd.hasOption("d") && cmd.hasOption("f")){            System.out.println("dとfは同時に指定できません");            return;        }        else if(!cmd.hasOption("d") && !cmd.hasOption("f")){            System.out.println("dとfのいずれかを指定する必要があります");            return;        }		// 解析用設定		if (cmd.hasOption("C")) {			Settings.getInstance()					.setClassMetricsFile(cmd.getOptionValue("C"));		}		if (cmd.hasOption("M")) {			Settings.getInstance()					.setMethodMetricsFile(cmd.getOptionValue("M"));		}		if (cmd.hasOption("F")) {			Settings.getInstance()					.setFieldMetricsFile(cmd.getOptionValue("F"));		}        if(cmd.hasOption("v"))            Settings.getInstance().setVersion(cmd.getOptionValue("v"));        else // default value            Settings.getInstance().setVersion(null);        if(cmd.hasOption("d"))            Settings.getInstance().addTargetDirectory(cmd.getOptionValue("d"));        else if(cmd.hasOption("f"))            Settings.getInstance().addListFile(cmd.getOptionValue("f"));        if(cmd.hasOption("o"))            Writer.setOutDir(Paths.get(cmd.getOptionValue("o")));		// 対象ディレクトリ以下のJavaファイルを登録し，解析		{			final JDTParser viewer = new JDTParser();            if (cmd.hasOption("l"))                viewer.addLibraries(cmd.getOptionValues("l"));            else                viewer.addLibraries(null);			viewer.addTargetFiles();			viewer.parseTargetFiles();			viewer.launchPlugins(cmd);			viewer.writeMetrics();		}		System.out.println("successfully finished.");	}    private void launchPlugins(CommandLine cmd) {        List<Plugin> plugins = new ArrayList<>();        if(cmd.hasOption("p"))            plugins.add(new GraphPlugin());        for( Plugin p : plugins )            p.run();    }    /**	 * 対象ファイルのASTから未解決クラス，フィールド，メソッド情報を取得	 */	public void parseTargetFiles() {		final ASTCaller caller = new ASTCaller();	}	/**	 * Settingsの中にライブラリファイルを登録する． デフォルトのディレクトリは./resource	 */	public void addLibraries(final String[] cmd) {        final List<String> list = new ArrayList<>();        list.add("./resource");        if(cmd != null)            for (String arg : cmd)                list.add(arg);		for (String arg : list) {			Path path = Paths.get(arg);			if (Files.exists(path)) {				ArrayList<String> jarList = ListFiles.list("jar", path);				for (String p : jarList) {					Settings.getInstance().addLibrary(p);				}			}		}	}	/**	 * 対象ディレクトリから対象ファイルを列挙	 */	public void addTargetFiles() {		final Set<String> targetDir = Settings.getInstance()				.getTargetDirectories();		for (String dir : targetDir) {			final ArrayList<String> files = ListFiles.list("java",					Paths.get(dir));			for (String file : files)				Settings.getInstance().addListFile(file);		}	}	public void writeMetrics() {		Settings setting = Settings.getInstance();		if(null != setting.getClassMetricsFile()){			MetricsWriter.writeClassMetrics(setting.getClassMetricsFile());		}		if(null != setting.getMethodMetricsFile()){			MetricsWriter.writeMethodMetrics(setting.getMethodMetricsFile());		}		if(null != setting.getFieldMetricsFile()){		}	}}