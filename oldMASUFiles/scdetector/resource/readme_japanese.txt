========== SCORPIOについて ==========

1.　Scorpio とは？
Scorpio はソースコードからコードクローン（重複した部分）を検出するソフトウェアです．
Scorpio は特殊なプログラム依存グラフを用いることによって，下記に示すコードクローンを検出することが可能です．

- コピーアンドペーストしただけのような，全く同じコードクローン
- 利用されている識別子名（変数名や関数名など）が異なるコードクローン
- 文単位で不一致部分を含むコードクローン


2. 使用条件
教育または研究を目的とした場合は，開発者に連絡をすることなく自由に使用できます．
再配布も自由に行っていただいて構いません．
企業等において使用する場合でも，自社で行われているプロジェクトのプロセス改善やプロダクト改善を目的としている場合は自由に使用していただいて結構です．
その他の目的で利用する場合（たとえば，コンサルティング業務など）は，肥後芳樹（higo@ist.osaka-u.ac.jp）まで連絡してください．
このソフトウェアの品質やトラブルについては一切保証しておりません．
なお，ソースコードはsourceforgeにて公開しています．
https://sourceforge.net/projects/masu/

3． 使用方法
3.1 ダウンロードと解凍
Scorpio のウェブサイト（http://www-sdl.ist.osaka-u.ac.jp/~higo/cgi-bin/moin.cgi/scorpio）より，
zipファイルをダウンロードし，適当なフォルダで解凍してください．
空白スペースや全角文字を含まないフォルダで展開することをお勧めします．
zipファイルに含まれているファイルは下記の通りです．

- antlr.jar, masu.jar: ソースコード解析ライブラリ
- cfg.jar: 制御依存グラフ生成ライブラリ
- pdg.jar: プログラム依存グラフ生成ライブラリ
- commons-cli-1.1.jar: 引数処理ライブラリ（Apache プロジェクトの commons CLI）
- scorpio.jar: コードクローン生成プログラム
- scorpioui.jar: 検出したコードクローンを閲覧するための簡易GUI


3.2 コードクローンの検出
コードクローンを検出します．
実行前に，3.1 で述べた全てのjarファイルが同一フォルダにあることを確認してください．
下記のコマンドをテンプレートにしてください．

> java -jar scorpio.jar -d directory -l language -o resultfile

- directory: 解析対象のJavaソースコードが置いているフォルダです．
- language: 解析対象プログラミング言語です．現在は java のみ利用可能です．
- resultfile: コードクローンの検出結果を出力するファイル名です．scorpio は XML　形式でファイルを出力するので，拡張子は「.xml」としてください．

また，Scorpio はメモリのヒープ領域，スタック領域を多く必要とします．
数千行あるいはそれ以上の規模のソフトウェアを対象とする場合は，各領域を多めに確保して Java VM　を起動した方がよいでしょう．
- XmxAAAm: ヒープ領域を AAA MBytes 用いる
- XssBBBm: スタック領域を BBB MBytes 用いる

さらに，Scorpioには必須でない下記のオプションも存在します．
適切にオプションを指定することにより，より目的にあったコードクローンを検出することが可能です．

- "-c count": 同形のプログラム要素（文や式）がcount数以上存在するプログラム要素を，コードクローンを検出する際に用いるプログラムスライスの基点としない．
このオプションを用いることにより，検出時間を大幅に短縮可能ですが，一部のコードクローンが検出されなくなってしまう可能性があります．
このオプションのデフォルト値はjava.lang.Integer.MAX_VALUEです．

- "-s size": 検出するコードクローンの最小の大きさを指定します．大きさは，同形部分グラフの頂点数で与えます．
「同形部分グラフの頂点数＝コードクローンを構成する文や式の数」と考えてください．
このオプションのデフォルト値は7です．

- "-t both|forward|backward": コードクローン検出に用いるプログラムスライスの種類を指定します．
forwardはフォワードスライス，backwardはバックワードスライス，both はその両方を用いることを指定します．
both を用いることにより，forward や backward を用いる場合に比べてより多くのコードクローンを検出可能ですが，その半面，検出時間が長くなります．
このオプションのデフォルト値は both です．

- "-q data|control|execution": プログラム依存グラフを構築する際に用いる依存関係の種類を設定します．
dataはデータ依存，controlは制御依存，executionは実行依存を表します．データ依存と制御依存の詳細については，下記の書籍を参考にしてください．
また，実行依存は，連続して実行される可能性のある2つのプログラム要素間に引かれる依存関係です．制御フローグラフのフローと同じと考えてください．
また，このオプションはコンマで区切って複数指定することも可能です．たとえば，データ依存と制御依存を用いたいときは， "-q data,control"と指定してください．
このオプションのデフォルト値は data,control,executionです．

## 下村隆夫：プログラムスライシング技術と応用，共立出版（1995）

- "-u yes|no": コントロールノード（if文やwhile文などの条件式から生成されたプログラム依存グラフの頂点）のみをスライス基点として用いるかどうかを指定します．
yes はコントロールノードのみを用いる，no は全てのノードを用いることを表します．
コントロールノードのみをスライス基点として用いることにより，検出時間を大幅に短縮可能ですが，一部のコードクローンが検出されなくなってしまう可能性があります．
このオプションのデフォルト値は no です．

- "-v yes|no": 冗長な出力を行うかどうかを指定します．
このオプションのデフォルト値は no です．

- "-w thread": 検出処理に用いるスレッドの数を用います．
検出に用いるスレッド以外にも管理用のスレッドが1つ存在しますので，実際には-wで与えた数+1のスレッドが存在することになります．
使用しているPCに搭載されている論理CPUの数，もしくはその数-1を引数として与えると，最もパフォーマンスが期待できます．

- "-x distance": データ依存辺を引く頂点間の最大距離を制限します．
このオプションを指定すると，distance値（行数）以上離れている頂点間にはデータ依存辺を引きません．
このオプションを適切に指定することにより，検出の精度が増し，また検出の速度も速くなる可能性があります．

- "-y distance": 制御依存辺を引く頂点間の最大距離を制限します．
このオプションを指定すると，distance値（行数）以上離れている頂点間には制御依存辺を引きません．
このオプションを適切に指定することにより，検出の精度が増し，また検出の速度も速くなる可能性があります．

- "-y distance": 実行依存辺を引く頂点間の最大距離を制限します．
このオプションを指定すると，distance値（行数）以上離れている頂点間には実行依存辺を引きません．
このオプションを適切に指定することにより，検出の精度が増し，また検出の速度も速くなる可能性があります．

- "-pv no|type|all":　ソースコード中の変数をどの程度正規化するのかを指定します．
no は正規化しない， type は同じ型の変数は同じ特殊文字に正規化する，all は全ての変数を同一の特殊文字に正規化します．
このオプションのデフォルト値は type です．

- "-pi no|type_with_arg|type_without_arg|all": ソースコードの中のメソッド呼び出しをどの程度正規化するのかを指定します．
no は正規化しない， type_with_arg は引数を残した上で返り値が等しいメソッド呼び出しは同じ特殊文字に正規化する，
type_without_arg は引数を取り除いた上で返り値が等しいメソッド呼び出しは同じ特殊文字に正規化する，all は全てのメソッド呼び出しを同じ特殊文字に正規化します．
このオプションのデフォルト値は  no です．

- "-po no|type|all": ソースコード中の演算（単項演算，二項演算，三項演算）をどの程度正規化するのかを指定します．
no は正規化しない， type は型が同じ演算は同じ特殊文字に正規化する，all は全ての演算を同じ特殊文字に正規化します．
このオプションのデフォルト値は no です．

- "-pl no|type|all": ソースコード中のリテラルをどの程度正規化するのかを指定します．
no は正規化しない， type は型が同じリテラルは同じ特殊文字に正規化する，all は全てのリテラルを同じ特殊文字に正規化します．
このオプションのデフォルト値は  type です．

- "-pc no|type|all": ソースコード中のキャストをどの程度正規化するのかを指定します．
no は正規化しない， type は型が同じキャストは同じ特殊文字に正規化する，all は全てのキャストを同じ特殊文字に正規化します．
このオプションのデフォルト値は no です．

- "-pr no|all": ソースコード中のクラス型参照をどの程度正規化するのかを指定します．
no は正規化しない， all は全ての参照を同じ特殊文字に正規化します．
このオプションのデフォルト値は no です．


3.3 コードクローンの閲覧
検出したコードクローンを閲覧します．下記のコマンドをテンプレートにしてください．

> java -jar scorpioui.jar -i resultfile

- resultfile: 3.2 でコードクローン情報を出力したファイルです．


---------- ---------- ----------
肥後　芳樹（Higo Yoshiki）
大阪大学 大学院情報科学研究科
コンピュータサイエンス専攻 ソフトウェア設計学講座
higo@ist.osaka-u.ac.jp

